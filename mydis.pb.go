// Code generated by protoc-gen-go.
// source: mydis.proto
// DO NOT EDIT!

/*
Package mydis is a generated protocol buffer package.

It is generated from these files:
	mydis.proto

It has these top-level messages:
	Null
	Key
	Bool
	Expiration
	ByteValue
	IntValue
	FloatValue
	KeysList
	List
	ListItem
	ErrorHash
	StringHash
	Hash
	HashField
	HashFieldSet
	WatchRequest
	Event
	Permission
	ResponseHeader
	AuthEnableRequest
	AuthDisableRequest
	AuthenticateRequest
	AuthUserAddRequest
	AuthUserGetRequest
	AuthUserDeleteRequest
	AuthUserChangePasswordRequest
	AuthUserGrantRoleRequest
	AuthUserRevokeRoleRequest
	AuthRoleAddRequest
	AuthRoleGetRequest
	AuthUserListRequest
	AuthRoleListRequest
	AuthRoleDeleteRequest
	AuthRoleGrantPermissionRequest
	AuthRoleRevokePermissionRequest
	AuthEnableResponse
	AuthDisableResponse
	AuthenticateResponse
	AuthUserAddResponse
	AuthUserGetResponse
	AuthUserDeleteResponse
	AuthUserChangePasswordResponse
	AuthUserGrantRoleResponse
	AuthUserRevokeRoleResponse
	AuthRoleAddResponse
	AuthRoleGetResponse
	AuthRoleListResponse
	AuthUserListResponse
	AuthRoleDeleteResponse
	AuthRoleGrantPermissionResponse
	AuthRoleRevokePermissionResponse
*/
package mydis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_EventType int32

const (
	Event_PUT    Event_EventType = 0
	Event_DELETE Event_EventType = 1
)

var Event_EventType_name = map[int32]string{
	0: "PUT",
	1: "DELETE",
}
var Event_EventType_value = map[string]int32{
	"PUT":    0,
	"DELETE": 1,
}

func (x Event_EventType) String() string {
	return proto.EnumName(Event_EventType_name, int32(x))
}
func (Event_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type Permission_Type int32

const (
	Permission_READ      Permission_Type = 0
	Permission_WRITE     Permission_Type = 1
	Permission_READWRITE Permission_Type = 2
)

var Permission_Type_name = map[int32]string{
	0: "READ",
	1: "WRITE",
	2: "READWRITE",
}
var Permission_Type_value = map[string]int32{
	"READ":      0,
	"WRITE":     1,
	"READWRITE": 2,
}

func (x Permission_Type) String() string {
	return proto.EnumName(Permission_Type_name, int32(x))
}
func (Permission_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

// Null object.
type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (m *Null) String() string            { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Key object.
type Key struct {
	Key               string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Limit             int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Revision          int64  `protobuf:"varint,4,opt,name=revision" json:"revision,omitempty"`
	MinModRevision    int64  `protobuf:"varint,10,opt,name=minModRevision" json:"minModRevision,omitempty"`
	MaxModRevision    int64  `protobuf:"varint,11,opt,name=maxModRevision" json:"maxModRevision,omitempty"`
	MinCreateRevision int64  `protobuf:"varint,12,opt,name=minCreateRevision" json:"minCreateRevision,omitempty"`
	MaxCreateRevision int64  `protobuf:"varint,13,opt,name=maxCreateRevision" json:"maxCreateRevision,omitempty"`
	Block             bool   `protobuf:"varint,14,opt,name=block" json:"block,omitempty"`
	BlockTimeout      int64  `protobuf:"varint,15,opt,name=blockTimeout" json:"blockTimeout,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Key) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Key) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Key) GetMinModRevision() int64 {
	if m != nil {
		return m.MinModRevision
	}
	return 0
}

func (m *Key) GetMaxModRevision() int64 {
	if m != nil {
		return m.MaxModRevision
	}
	return 0
}

func (m *Key) GetMinCreateRevision() int64 {
	if m != nil {
		return m.MinCreateRevision
	}
	return 0
}

func (m *Key) GetMaxCreateRevision() int64 {
	if m != nil {
		return m.MaxCreateRevision
	}
	return 0
}

func (m *Key) GetBlock() bool {
	if m != nil {
		return m.Block
	}
	return false
}

func (m *Key) GetBlockTimeout() int64 {
	if m != nil {
		return m.BlockTimeout
	}
	return 0
}

// Bool object.
type Bool struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Bool) Reset()                    { *m = Bool{} }
func (m *Bool) String() string            { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()               {}
func (*Bool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Bool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// Expiration object.
type Expiration struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Exp int64  `protobuf:"zigzag64,2,opt,name=exp" json:"exp,omitempty"`
}

func (m *Expiration) Reset()                    { *m = Expiration{} }
func (m *Expiration) String() string            { return proto.CompactTextString(m) }
func (*Expiration) ProtoMessage()               {}
func (*Expiration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Expiration) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Expiration) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

// ByteValue object.
type ByteValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ByteValue) Reset()                    { *m = ByteValue{} }
func (m *ByteValue) String() string            { return proto.CompactTextString(m) }
func (*ByteValue) ProtoMessage()               {}
func (*ByteValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ByteValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ByteValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// IntValue object.
type IntValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value int64  `protobuf:"zigzag64,2,opt,name=value" json:"value,omitempty"`
}

func (m *IntValue) Reset()                    { *m = IntValue{} }
func (m *IntValue) String() string            { return proto.CompactTextString(m) }
func (*IntValue) ProtoMessage()               {}
func (*IntValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IntValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *IntValue) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// FloatValue object.
type FloatValue struct {
	Key   string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *FloatValue) Reset()                    { *m = FloatValue{} }
func (m *FloatValue) String() string            { return proto.CompactTextString(m) }
func (*FloatValue) ProtoMessage()               {}
func (*FloatValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FloatValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FloatValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// KeysList object.
type KeysList struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *KeysList) Reset()                    { *m = KeysList{} }
func (m *KeysList) String() string            { return proto.CompactTextString(m) }
func (*KeysList) ProtoMessage()               {}
func (*KeysList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *KeysList) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

// List object.
type List struct {
	Key   string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value [][]byte `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	Limit int64    `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *List) Reset()                    { *m = List{} }
func (m *List) String() string            { return proto.CompactTextString(m) }
func (*List) ProtoMessage()               {}
func (*List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *List) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *List) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *List) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// ListItem object.
type ListItem struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Index int64  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ListItem) Reset()                    { *m = ListItem{} }
func (m *ListItem) String() string            { return proto.CompactTextString(m) }
func (*ListItem) ProtoMessage()               {}
func (*ListItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ListItem) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ListItem) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// ErrorHash object.
type ErrorHash struct {
	Errors map[string]string `protobuf:"bytes,1,rep,name=errors" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ErrorHash) Reset()                    { *m = ErrorHash{} }
func (m *ErrorHash) String() string            { return proto.CompactTextString(m) }
func (*ErrorHash) ProtoMessage()               {}
func (*ErrorHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ErrorHash) GetErrors() map[string]string {
	if m != nil {
		return m.Errors
	}
	return nil
}

// StringHash object.
type StringHash struct {
	Key   string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value map[string]string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StringHash) Reset()                    { *m = StringHash{} }
func (m *StringHash) String() string            { return proto.CompactTextString(m) }
func (*StringHash) ProtoMessage()               {}
func (*StringHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StringHash) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StringHash) GetValue() map[string]string {
	if m != nil {
		return m.Value
	}
	return nil
}

// Hash object.
type Hash struct {
	Key   string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value map[string][]byte `protobuf:"bytes,2,rep,name=value" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Hash) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Hash) GetValue() map[string][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// HashField object.
type HashField struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Field string `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *HashField) Reset()                    { *m = HashField{} }
func (m *HashField) String() string            { return proto.CompactTextString(m) }
func (*HashField) ProtoMessage()               {}
func (*HashField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *HashField) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HashField) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *HashField) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// HashFieldSet object.
type HashFieldSet struct {
	Key   string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Field []string `protobuf:"bytes,2,rep,name=field" json:"field,omitempty"`
	Value [][]byte `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *HashFieldSet) Reset()                    { *m = HashFieldSet{} }
func (m *HashFieldSet) String() string            { return proto.CompactTextString(m) }
func (*HashFieldSet) ProtoMessage()               {}
func (*HashFieldSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *HashFieldSet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HashFieldSet) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *HashFieldSet) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// WatchRequest object.
type WatchRequest struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Prefix bool   `protobuf:"varint,2,opt,name=prefix" json:"prefix,omitempty"`
	Rev    int64  `protobuf:"varint,3,opt,name=rev" json:"rev,omitempty"`
	Id     int64  `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	Cancel bool   `protobuf:"varint,5,opt,name=cancel" json:"cancel,omitempty"`
}

func (m *WatchRequest) Reset()                    { *m = WatchRequest{} }
func (m *WatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()               {}
func (*WatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *WatchRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WatchRequest) GetPrefix() bool {
	if m != nil {
		return m.Prefix
	}
	return false
}

func (m *WatchRequest) GetRev() int64 {
	if m != nil {
		return m.Rev
	}
	return 0
}

func (m *WatchRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WatchRequest) GetCancel() bool {
	if m != nil {
		return m.Cancel
	}
	return false
}

// Event object.
type Event struct {
	Type     Event_EventType `protobuf:"varint,1,opt,name=type,enum=mydis.Event_EventType" json:"type,omitempty"`
	Current  *ByteValue      `protobuf:"bytes,3,opt,name=current" json:"current,omitempty"`
	Previous *ByteValue      `protobuf:"bytes,4,opt,name=previous" json:"previous,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Event) GetType() Event_EventType {
	if m != nil {
		return m.Type
	}
	return Event_PUT
}

func (m *Event) GetCurrent() *ByteValue {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *Event) GetPrevious() *ByteValue {
	if m != nil {
		return m.Previous
	}
	return nil
}

// -- Etcd auth passthrough messages
// Permission is a single entity
type Permission struct {
	PermType Permission_Type `protobuf:"varint,1,opt,name=permType,enum=mydis.Permission_Type" json:"permType,omitempty"`
	Key      []byte          `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	RangeEnd []byte          `protobuf:"bytes,3,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Permission) GetPermType() Permission_Type {
	if m != nil {
		return m.PermType
	}
	return Permission_READ
}

func (m *Permission) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Permission) GetRangeEnd() []byte {
	if m != nil {
		return m.RangeEnd
	}
	return nil
}

type ResponseHeader struct {
	// cluster_id is the ID of the cluster which sent the response.
	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	// member_id is the ID of the member which sent the response.
	MemberId uint64 `protobuf:"varint,2,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	// revision is the key-value store revision when the request was applied.
	Revision int64 `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
	// raft_term is the raft term when the request was applied.
	RaftTerm uint64 `protobuf:"varint,4,opt,name=raft_term,json=raftTerm" json:"raft_term,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ResponseHeader) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *ResponseHeader) GetMemberId() uint64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *ResponseHeader) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *ResponseHeader) GetRaftTerm() uint64 {
	if m != nil {
		return m.RaftTerm
	}
	return 0
}

type AuthEnableRequest struct {
}

func (m *AuthEnableRequest) Reset()                    { *m = AuthEnableRequest{} }
func (m *AuthEnableRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthEnableRequest) ProtoMessage()               {}
func (*AuthEnableRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type AuthDisableRequest struct {
}

func (m *AuthDisableRequest) Reset()                    { *m = AuthDisableRequest{} }
func (m *AuthDisableRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthDisableRequest) ProtoMessage()               {}
func (*AuthDisableRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type AuthenticateRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthenticateRequest) Reset()                    { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()               {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AuthenticateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthenticateRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthUserAddRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthUserAddRequest) Reset()                    { *m = AuthUserAddRequest{} }
func (m *AuthUserAddRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserAddRequest) ProtoMessage()               {}
func (*AuthUserAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AuthUserAddRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthUserAddRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthUserGetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AuthUserGetRequest) Reset()                    { *m = AuthUserGetRequest{} }
func (m *AuthUserGetRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserGetRequest) ProtoMessage()               {}
func (*AuthUserGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *AuthUserGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AuthUserDeleteRequest struct {
	// name is the name of the user to delete.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AuthUserDeleteRequest) Reset()                    { *m = AuthUserDeleteRequest{} }
func (m *AuthUserDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserDeleteRequest) ProtoMessage()               {}
func (*AuthUserDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *AuthUserDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AuthUserChangePasswordRequest struct {
	// name is the name of the user whose password is being changed.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// password is the new password for the user.
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthUserChangePasswordRequest) Reset()                    { *m = AuthUserChangePasswordRequest{} }
func (m *AuthUserChangePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserChangePasswordRequest) ProtoMessage()               {}
func (*AuthUserChangePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *AuthUserChangePasswordRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthUserChangePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthUserGrantRoleRequest struct {
	// user is the name of the user which should be granted a given role.
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// role is the name of the role to grant to the user.
	Role string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (m *AuthUserGrantRoleRequest) Reset()                    { *m = AuthUserGrantRoleRequest{} }
func (m *AuthUserGrantRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserGrantRoleRequest) ProtoMessage()               {}
func (*AuthUserGrantRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *AuthUserGrantRoleRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *AuthUserGrantRoleRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type AuthUserRevokeRoleRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Role string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (m *AuthUserRevokeRoleRequest) Reset()                    { *m = AuthUserRevokeRoleRequest{} }
func (m *AuthUserRevokeRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserRevokeRoleRequest) ProtoMessage()               {}
func (*AuthUserRevokeRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *AuthUserRevokeRoleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthUserRevokeRoleRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type AuthRoleAddRequest struct {
	// name is the name of the role to add to the authentication system.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AuthRoleAddRequest) Reset()                    { *m = AuthRoleAddRequest{} }
func (m *AuthRoleAddRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleAddRequest) ProtoMessage()               {}
func (*AuthRoleAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *AuthRoleAddRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AuthRoleGetRequest struct {
	Role string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *AuthRoleGetRequest) Reset()                    { *m = AuthRoleGetRequest{} }
func (m *AuthRoleGetRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleGetRequest) ProtoMessage()               {}
func (*AuthRoleGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *AuthRoleGetRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type AuthUserListRequest struct {
}

func (m *AuthUserListRequest) Reset()                    { *m = AuthUserListRequest{} }
func (m *AuthUserListRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserListRequest) ProtoMessage()               {}
func (*AuthUserListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type AuthRoleListRequest struct {
}

func (m *AuthRoleListRequest) Reset()                    { *m = AuthRoleListRequest{} }
func (m *AuthRoleListRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleListRequest) ProtoMessage()               {}
func (*AuthRoleListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type AuthRoleDeleteRequest struct {
	Role string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *AuthRoleDeleteRequest) Reset()                    { *m = AuthRoleDeleteRequest{} }
func (m *AuthRoleDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleDeleteRequest) ProtoMessage()               {}
func (*AuthRoleDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *AuthRoleDeleteRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type AuthRoleGrantPermissionRequest struct {
	// name is the name of the role which will be granted the permission.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// perm is the permission to grant to the role.
	Perm *Permission `protobuf:"bytes,2,opt,name=perm" json:"perm,omitempty"`
}

func (m *AuthRoleGrantPermissionRequest) Reset()                    { *m = AuthRoleGrantPermissionRequest{} }
func (m *AuthRoleGrantPermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleGrantPermissionRequest) ProtoMessage()               {}
func (*AuthRoleGrantPermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *AuthRoleGrantPermissionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthRoleGrantPermissionRequest) GetPerm() *Permission {
	if m != nil {
		return m.Perm
	}
	return nil
}

type AuthRoleRevokePermissionRequest struct {
	Role     string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	RangeEnd string `protobuf:"bytes,3,opt,name=range_end,json=rangeEnd" json:"range_end,omitempty"`
}

func (m *AuthRoleRevokePermissionRequest) Reset()         { *m = AuthRoleRevokePermissionRequest{} }
func (m *AuthRoleRevokePermissionRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRoleRevokePermissionRequest) ProtoMessage()    {}
func (*AuthRoleRevokePermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34}
}

func (m *AuthRoleRevokePermissionRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *AuthRoleRevokePermissionRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AuthRoleRevokePermissionRequest) GetRangeEnd() string {
	if m != nil {
		return m.RangeEnd
	}
	return ""
}

type AuthEnableResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthEnableResponse) Reset()                    { *m = AuthEnableResponse{} }
func (m *AuthEnableResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthEnableResponse) ProtoMessage()               {}
func (*AuthEnableResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *AuthEnableResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthDisableResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthDisableResponse) Reset()                    { *m = AuthDisableResponse{} }
func (m *AuthDisableResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthDisableResponse) ProtoMessage()               {}
func (*AuthDisableResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *AuthDisableResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthenticateResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// token is an authorized token that can be used in succeeding RPCs
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *AuthenticateResponse) Reset()                    { *m = AuthenticateResponse{} }
func (m *AuthenticateResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateResponse) ProtoMessage()               {}
func (*AuthenticateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *AuthenticateResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AuthenticateResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AuthUserAddResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthUserAddResponse) Reset()                    { *m = AuthUserAddResponse{} }
func (m *AuthUserAddResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthUserAddResponse) ProtoMessage()               {}
func (*AuthUserAddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *AuthUserAddResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthUserGetResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Roles  []string        `protobuf:"bytes,2,rep,name=roles" json:"roles,omitempty"`
}

func (m *AuthUserGetResponse) Reset()                    { *m = AuthUserGetResponse{} }
func (m *AuthUserGetResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthUserGetResponse) ProtoMessage()               {}
func (*AuthUserGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *AuthUserGetResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AuthUserGetResponse) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type AuthUserDeleteResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthUserDeleteResponse) Reset()                    { *m = AuthUserDeleteResponse{} }
func (m *AuthUserDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthUserDeleteResponse) ProtoMessage()               {}
func (*AuthUserDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *AuthUserDeleteResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthUserChangePasswordResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthUserChangePasswordResponse) Reset()                    { *m = AuthUserChangePasswordResponse{} }
func (m *AuthUserChangePasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthUserChangePasswordResponse) ProtoMessage()               {}
func (*AuthUserChangePasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *AuthUserChangePasswordResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthUserGrantRoleResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthUserGrantRoleResponse) Reset()                    { *m = AuthUserGrantRoleResponse{} }
func (m *AuthUserGrantRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthUserGrantRoleResponse) ProtoMessage()               {}
func (*AuthUserGrantRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *AuthUserGrantRoleResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthUserRevokeRoleResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthUserRevokeRoleResponse) Reset()                    { *m = AuthUserRevokeRoleResponse{} }
func (m *AuthUserRevokeRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthUserRevokeRoleResponse) ProtoMessage()               {}
func (*AuthUserRevokeRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *AuthUserRevokeRoleResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthRoleAddResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthRoleAddResponse) Reset()                    { *m = AuthRoleAddResponse{} }
func (m *AuthRoleAddResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleAddResponse) ProtoMessage()               {}
func (*AuthRoleAddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *AuthRoleAddResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthRoleGetResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Perm   []*Permission   `protobuf:"bytes,2,rep,name=perm" json:"perm,omitempty"`
}

func (m *AuthRoleGetResponse) Reset()                    { *m = AuthRoleGetResponse{} }
func (m *AuthRoleGetResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleGetResponse) ProtoMessage()               {}
func (*AuthRoleGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *AuthRoleGetResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AuthRoleGetResponse) GetPerm() []*Permission {
	if m != nil {
		return m.Perm
	}
	return nil
}

type AuthRoleListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Roles  []string        `protobuf:"bytes,2,rep,name=roles" json:"roles,omitempty"`
}

func (m *AuthRoleListResponse) Reset()                    { *m = AuthRoleListResponse{} }
func (m *AuthRoleListResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleListResponse) ProtoMessage()               {}
func (*AuthRoleListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *AuthRoleListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AuthRoleListResponse) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type AuthUserListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []string        `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *AuthUserListResponse) Reset()                    { *m = AuthUserListResponse{} }
func (m *AuthUserListResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthUserListResponse) ProtoMessage()               {}
func (*AuthUserListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *AuthUserListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AuthUserListResponse) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type AuthRoleDeleteResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthRoleDeleteResponse) Reset()                    { *m = AuthRoleDeleteResponse{} }
func (m *AuthRoleDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthRoleDeleteResponse) ProtoMessage()               {}
func (*AuthRoleDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *AuthRoleDeleteResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthRoleGrantPermissionResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthRoleGrantPermissionResponse) Reset()         { *m = AuthRoleGrantPermissionResponse{} }
func (m *AuthRoleGrantPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*AuthRoleGrantPermissionResponse) ProtoMessage()    {}
func (*AuthRoleGrantPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{49}
}

func (m *AuthRoleGrantPermissionResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AuthRoleRevokePermissionResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AuthRoleRevokePermissionResponse) Reset()         { *m = AuthRoleRevokePermissionResponse{} }
func (m *AuthRoleRevokePermissionResponse) String() string { return proto.CompactTextString(m) }
func (*AuthRoleRevokePermissionResponse) ProtoMessage()    {}
func (*AuthRoleRevokePermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{50}
}

func (m *AuthRoleRevokePermissionResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*Null)(nil), "mydis.Null")
	proto.RegisterType((*Key)(nil), "mydis.Key")
	proto.RegisterType((*Bool)(nil), "mydis.Bool")
	proto.RegisterType((*Expiration)(nil), "mydis.Expiration")
	proto.RegisterType((*ByteValue)(nil), "mydis.ByteValue")
	proto.RegisterType((*IntValue)(nil), "mydis.IntValue")
	proto.RegisterType((*FloatValue)(nil), "mydis.FloatValue")
	proto.RegisterType((*KeysList)(nil), "mydis.KeysList")
	proto.RegisterType((*List)(nil), "mydis.List")
	proto.RegisterType((*ListItem)(nil), "mydis.ListItem")
	proto.RegisterType((*ErrorHash)(nil), "mydis.ErrorHash")
	proto.RegisterType((*StringHash)(nil), "mydis.StringHash")
	proto.RegisterType((*Hash)(nil), "mydis.Hash")
	proto.RegisterType((*HashField)(nil), "mydis.HashField")
	proto.RegisterType((*HashFieldSet)(nil), "mydis.HashFieldSet")
	proto.RegisterType((*WatchRequest)(nil), "mydis.WatchRequest")
	proto.RegisterType((*Event)(nil), "mydis.Event")
	proto.RegisterType((*Permission)(nil), "mydis.Permission")
	proto.RegisterType((*ResponseHeader)(nil), "mydis.ResponseHeader")
	proto.RegisterType((*AuthEnableRequest)(nil), "mydis.AuthEnableRequest")
	proto.RegisterType((*AuthDisableRequest)(nil), "mydis.AuthDisableRequest")
	proto.RegisterType((*AuthenticateRequest)(nil), "mydis.AuthenticateRequest")
	proto.RegisterType((*AuthUserAddRequest)(nil), "mydis.AuthUserAddRequest")
	proto.RegisterType((*AuthUserGetRequest)(nil), "mydis.AuthUserGetRequest")
	proto.RegisterType((*AuthUserDeleteRequest)(nil), "mydis.AuthUserDeleteRequest")
	proto.RegisterType((*AuthUserChangePasswordRequest)(nil), "mydis.AuthUserChangePasswordRequest")
	proto.RegisterType((*AuthUserGrantRoleRequest)(nil), "mydis.AuthUserGrantRoleRequest")
	proto.RegisterType((*AuthUserRevokeRoleRequest)(nil), "mydis.AuthUserRevokeRoleRequest")
	proto.RegisterType((*AuthRoleAddRequest)(nil), "mydis.AuthRoleAddRequest")
	proto.RegisterType((*AuthRoleGetRequest)(nil), "mydis.AuthRoleGetRequest")
	proto.RegisterType((*AuthUserListRequest)(nil), "mydis.AuthUserListRequest")
	proto.RegisterType((*AuthRoleListRequest)(nil), "mydis.AuthRoleListRequest")
	proto.RegisterType((*AuthRoleDeleteRequest)(nil), "mydis.AuthRoleDeleteRequest")
	proto.RegisterType((*AuthRoleGrantPermissionRequest)(nil), "mydis.AuthRoleGrantPermissionRequest")
	proto.RegisterType((*AuthRoleRevokePermissionRequest)(nil), "mydis.AuthRoleRevokePermissionRequest")
	proto.RegisterType((*AuthEnableResponse)(nil), "mydis.AuthEnableResponse")
	proto.RegisterType((*AuthDisableResponse)(nil), "mydis.AuthDisableResponse")
	proto.RegisterType((*AuthenticateResponse)(nil), "mydis.AuthenticateResponse")
	proto.RegisterType((*AuthUserAddResponse)(nil), "mydis.AuthUserAddResponse")
	proto.RegisterType((*AuthUserGetResponse)(nil), "mydis.AuthUserGetResponse")
	proto.RegisterType((*AuthUserDeleteResponse)(nil), "mydis.AuthUserDeleteResponse")
	proto.RegisterType((*AuthUserChangePasswordResponse)(nil), "mydis.AuthUserChangePasswordResponse")
	proto.RegisterType((*AuthUserGrantRoleResponse)(nil), "mydis.AuthUserGrantRoleResponse")
	proto.RegisterType((*AuthUserRevokeRoleResponse)(nil), "mydis.AuthUserRevokeRoleResponse")
	proto.RegisterType((*AuthRoleAddResponse)(nil), "mydis.AuthRoleAddResponse")
	proto.RegisterType((*AuthRoleGetResponse)(nil), "mydis.AuthRoleGetResponse")
	proto.RegisterType((*AuthRoleListResponse)(nil), "mydis.AuthRoleListResponse")
	proto.RegisterType((*AuthUserListResponse)(nil), "mydis.AuthUserListResponse")
	proto.RegisterType((*AuthRoleDeleteResponse)(nil), "mydis.AuthRoleDeleteResponse")
	proto.RegisterType((*AuthRoleGrantPermissionResponse)(nil), "mydis.AuthRoleGrantPermissionResponse")
	proto.RegisterType((*AuthRoleRevokePermissionResponse)(nil), "mydis.AuthRoleRevokePermissionResponse")
	proto.RegisterEnum("mydis.Event_EventType", Event_EventType_name, Event_EventType_value)
	proto.RegisterEnum("mydis.Permission_Type", Permission_Type_name, Permission_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mydis service

type MydisClient interface {
	// -- core functions
	// Keys returns a list of valid keys.
	Keys(ctx context.Context, in *Null, opts ...grpc.CallOption) (*KeysList, error)
	// KeysWithPrefix returns a list of keys with the given prefix.
	KeysWithPrefix(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeysList, error)
	// Has checks if the cache has the given key and that it is not expired.
	Has(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Bool, error)
	// SetExpire sets the expiration on a key.
	SetExpire(ctx context.Context, in *Expiration, opts ...grpc.CallOption) (*Null, error)
	// Lock a key from being modified.
	Lock(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Null, error)
	// LockWithTimeout locks a key, waiting for the given number of seconds if already locked before returning an error.
	LockWithTimeout(ctx context.Context, in *Expiration, opts ...grpc.CallOption) (*Null, error)
	// Unlock a key for modifications.
	Unlock(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Null, error)
	// UnlockThenSet unlocks a key, then immediately sets its byte array value.
	UnlockThenSet(ctx context.Context, in *ByteValue, opts ...grpc.CallOption) (*Null, error)
	// UnlockThenSetList unlocks a key, then immediately sets its list value.
	UnlockThenSetList(ctx context.Context, in *List, opts ...grpc.CallOption) (*Null, error)
	// Delete removes a key from the cache.
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Null, error)
	// Clear the cache.
	Clear(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Null, error)
	// -- bytes functions
	// Get gets the value for the given key as a byte slice.
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ByteValue, error)
	// GetMany gets a list of values from the cache.
	GetMany(ctx context.Context, in *KeysList, opts ...grpc.CallOption) (*Hash, error)
	// GetWithPrefix returns the keys with the given prefix.
	GetWithPrefix(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Hash, error)
	// Set sets the byte value.
	Set(ctx context.Context, in *ByteValue, opts ...grpc.CallOption) (*Null, error)
	// SetNX sets a value only if the key doesn't exist, returns true if changed.
	SetNX(ctx context.Context, in *ByteValue, opts ...grpc.CallOption) (*Bool, error)
	// SetMany values, returning a map[key]errorText for any errors.
	SetMany(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*ErrorHash, error)
	// Length returns the length of the value for the given key.
	Length(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IntValue, error)
	// -- number functions
	// GetInt gets an integer value for the given key.
	GetInt(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IntValue, error)
	// GetFloat gets a float value for the given key.
	GetFloat(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FloatValue, error)
	// SetInt sets an integer.
	SetInt(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Null, error)
	// SetFloat sets a float.
	SetFloat(ctx context.Context, in *FloatValue, opts ...grpc.CallOption) (*Null, error)
	// IncrementInt increment an integer stored at the given key by the given number and returns new value.
	IncrementInt(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error)
	// DecrementInt decrements an integer stored at the given key by the given number and returns new value.
	DecrementInt(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error)
	// IncrementFloat increment a float stored at the given key by the given number and returns new value.
	IncrementFloat(ctx context.Context, in *FloatValue, opts ...grpc.CallOption) (*FloatValue, error)
	// DecrementFloat decrements a float stored at the given key by the given number and returns new value.
	DecrementFloat(ctx context.Context, in *FloatValue, opts ...grpc.CallOption) (*FloatValue, error)
	// -- list functions
	// GetList gets a list from the cache.
	GetList(ctx context.Context, in *Key, opts ...grpc.CallOption) (*List, error)
	// GetListItem gets a single item from a list by index, supports negative indexing.
	GetListItem(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*ByteValue, error)
	// SetList sets a list in the cache.
	SetList(ctx context.Context, in *List, opts ...grpc.CallOption) (*Null, error)
	// SetListItem sets a single item in a list by index.
	SetListItem(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error)
	// ListLength returns the number of items in a list.
	ListLength(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IntValue, error)
	// ListLimit sets the maximum length of a list, removing items from the top once limit is reached.
	ListLimit(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error)
	// ListInsert inserts a new item at the given index in the list.
	ListInsert(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error)
	// ListAppend inserts a new item at the end of the list.
	ListAppend(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error)
	// ListPopLeft returns and removes the first item in a list.
	ListPopLeft(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ByteValue, error)
	// ListPopRight returns and removes the last item in a list.
	ListPopRight(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ByteValue, error)
	// ListHas determines if a list contains an item, returns index or -1 if not found.
	ListHas(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*IntValue, error)
	// ListDelete removes an item from a list by index.
	ListDelete(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error)
	// ListDeleteItem removes the first occurrence of value from a list, returns index of removed item or -1 for not found.
	ListDeleteItem(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*IntValue, error)
	// -- hash functions
	// GetHash gets a hash from the cache.
	GetHash(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Hash, error)
	// GetHashField gets a single value in a hash.
	GetHashField(ctx context.Context, in *HashField, opts ...grpc.CallOption) (*ByteValue, error)
	// GetHashFields gets multiple hash values.
	GetHashFields(ctx context.Context, in *HashFieldSet, opts ...grpc.CallOption) (*Hash, error)
	// HashHas determines if a hash has a given field.
	HashHas(ctx context.Context, in *HashField, opts ...grpc.CallOption) (*Bool, error)
	// HashLength returns the number of fields in a hash.
	HashLength(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IntValue, error)
	// HashFields gets a list of the fields in a hash.
	HashFields(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeysList, error)
	// HashValues gets a list of the values in a hash.
	HashValues(ctx context.Context, in *Key, opts ...grpc.CallOption) (*List, error)
	// SetHash sets the value of a hash.
	SetHash(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Null, error)
	// SetHashField sets a single value in a hash.
	SetHashField(ctx context.Context, in *HashField, opts ...grpc.CallOption) (*Null, error)
	// SetHashFields sets multiple values in a hash.
	SetHashFields(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Null, error)
	// DelHashField deletes a field from a hash.
	DelHashField(ctx context.Context, in *HashField, opts ...grpc.CallOption) (*Null, error)
	// -- push functions
	// Watch for changes to a key.
	Watch(ctx context.Context, opts ...grpc.CallOption) (Mydis_WatchClient, error)
	// -- auth passthrough functions
	// AuthEnable enables authentication.
	AuthEnable(ctx context.Context, in *AuthEnableRequest, opts ...grpc.CallOption) (*AuthEnableResponse, error)
	// AuthDisable disables authentication.
	AuthDisable(ctx context.Context, in *AuthDisableRequest, opts ...grpc.CallOption) (*AuthDisableResponse, error)
	// Authenticate processes an authenticate request.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// UserAdd adds a new user.
	UserAdd(ctx context.Context, in *AuthUserAddRequest, opts ...grpc.CallOption) (*AuthUserAddResponse, error)
	// UserGet gets detailed user information.
	UserGet(ctx context.Context, in *AuthUserGetRequest, opts ...grpc.CallOption) (*AuthUserGetResponse, error)
	// UserList gets a list of all users.
	UserList(ctx context.Context, in *AuthUserListRequest, opts ...grpc.CallOption) (*AuthUserListResponse, error)
	// UserDelete deletes a specified user.
	UserDelete(ctx context.Context, in *AuthUserDeleteRequest, opts ...grpc.CallOption) (*AuthUserDeleteResponse, error)
	// UserChangePassword changes the password of a specified user.
	UserChangePassword(ctx context.Context, in *AuthUserChangePasswordRequest, opts ...grpc.CallOption) (*AuthUserChangePasswordResponse, error)
	// UserGrantRole grants a role to a specified user.
	UserGrantRole(ctx context.Context, in *AuthUserGrantRoleRequest, opts ...grpc.CallOption) (*AuthUserGrantRoleResponse, error)
	// UserRevokeRole revokes a role of specified user.
	UserRevokeRole(ctx context.Context, in *AuthUserRevokeRoleRequest, opts ...grpc.CallOption) (*AuthUserRevokeRoleResponse, error)
	// RoleAdd adds a new role.
	RoleAdd(ctx context.Context, in *AuthRoleAddRequest, opts ...grpc.CallOption) (*AuthRoleAddResponse, error)
	// RoleGet gets detailed role information.
	RoleGet(ctx context.Context, in *AuthRoleGetRequest, opts ...grpc.CallOption) (*AuthRoleGetResponse, error)
	// RoleList gets lists of all roles.
	RoleList(ctx context.Context, in *AuthRoleListRequest, opts ...grpc.CallOption) (*AuthRoleListResponse, error)
	// RoleDelete deletes a specified role.
	RoleDelete(ctx context.Context, in *AuthRoleDeleteRequest, opts ...grpc.CallOption) (*AuthRoleDeleteResponse, error)
	// RoleGrantPermission grants a permission of a specified key or range to a specified role.
	RoleGrantPermission(ctx context.Context, in *AuthRoleGrantPermissionRequest, opts ...grpc.CallOption) (*AuthRoleGrantPermissionResponse, error)
	// RoleRevokePermission revokes a key or range permission of a specified role.
	RoleRevokePermission(ctx context.Context, in *AuthRoleRevokePermissionRequest, opts ...grpc.CallOption) (*AuthRoleRevokePermissionResponse, error)
}

type mydisClient struct {
	cc *grpc.ClientConn
}

func NewMydisClient(cc *grpc.ClientConn) MydisClient {
	return &mydisClient{cc}
}

func (c *mydisClient) Keys(ctx context.Context, in *Null, opts ...grpc.CallOption) (*KeysList, error) {
	out := new(KeysList)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Keys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) KeysWithPrefix(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeysList, error) {
	out := new(KeysList)
	err := grpc.Invoke(ctx, "/mydis.Mydis/KeysWithPrefix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Has(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Has", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetExpire(ctx context.Context, in *Expiration, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetExpire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Lock(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Lock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) LockWithTimeout(ctx context.Context, in *Expiration, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/LockWithTimeout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Unlock(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Unlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UnlockThenSet(ctx context.Context, in *ByteValue, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UnlockThenSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UnlockThenSetList(ctx context.Context, in *List, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UnlockThenSetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Clear(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Clear", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ByteValue, error) {
	out := new(ByteValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetMany(ctx context.Context, in *KeysList, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetMany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetWithPrefix(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetWithPrefix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Set(ctx context.Context, in *ByteValue, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetNX(ctx context.Context, in *ByteValue, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetNX", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetMany(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*ErrorHash, error) {
	out := new(ErrorHash)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetMany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Length(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Length", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetInt(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetInt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetFloat(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FloatValue, error) {
	out := new(FloatValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetFloat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetInt(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetInt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetFloat(ctx context.Context, in *FloatValue, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetFloat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) IncrementInt(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/IncrementInt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) DecrementInt(ctx context.Context, in *IntValue, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/DecrementInt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) IncrementFloat(ctx context.Context, in *FloatValue, opts ...grpc.CallOption) (*FloatValue, error) {
	out := new(FloatValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/IncrementFloat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) DecrementFloat(ctx context.Context, in *FloatValue, opts ...grpc.CallOption) (*FloatValue, error) {
	out := new(FloatValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/DecrementFloat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetList(ctx context.Context, in *Key, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetListItem(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*ByteValue, error) {
	out := new(ByteValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetListItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetList(ctx context.Context, in *List, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetListItem(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetListItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListLength(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListLength", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListLimit(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListInsert(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListInsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListAppend(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListAppend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListPopLeft(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ByteValue, error) {
	out := new(ByteValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListPopLeft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListPopRight(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ByteValue, error) {
	out := new(ByteValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListPopRight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListHas(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListHas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListDelete(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) ListDeleteItem(ctx context.Context, in *ListItem, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/ListDeleteItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetHash(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetHashField(ctx context.Context, in *HashField, opts ...grpc.CallOption) (*ByteValue, error) {
	out := new(ByteValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetHashField", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) GetHashFields(ctx context.Context, in *HashFieldSet, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := grpc.Invoke(ctx, "/mydis.Mydis/GetHashFields", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) HashHas(ctx context.Context, in *HashField, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mydis.Mydis/HashHas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) HashLength(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IntValue, error) {
	out := new(IntValue)
	err := grpc.Invoke(ctx, "/mydis.Mydis/HashLength", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) HashFields(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeysList, error) {
	out := new(KeysList)
	err := grpc.Invoke(ctx, "/mydis.Mydis/HashFields", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) HashValues(ctx context.Context, in *Key, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := grpc.Invoke(ctx, "/mydis.Mydis/HashValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetHash(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetHashField(ctx context.Context, in *HashField, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetHashField", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) SetHashFields(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/SetHashFields", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) DelHashField(ctx context.Context, in *HashField, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/mydis.Mydis/DelHashField", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Watch(ctx context.Context, opts ...grpc.CallOption) (Mydis_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Mydis_serviceDesc.Streams[0], c.cc, "/mydis.Mydis/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &mydisWatchClient{stream}
	return x, nil
}

type Mydis_WatchClient interface {
	Send(*WatchRequest) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type mydisWatchClient struct {
	grpc.ClientStream
}

func (x *mydisWatchClient) Send(m *WatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mydisWatchClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mydisClient) AuthEnable(ctx context.Context, in *AuthEnableRequest, opts ...grpc.CallOption) (*AuthEnableResponse, error) {
	out := new(AuthEnableResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/AuthEnable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) AuthDisable(ctx context.Context, in *AuthDisableRequest, opts ...grpc.CallOption) (*AuthDisableResponse, error) {
	out := new(AuthDisableResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/AuthDisable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UserAdd(ctx context.Context, in *AuthUserAddRequest, opts ...grpc.CallOption) (*AuthUserAddResponse, error) {
	out := new(AuthUserAddResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UserAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UserGet(ctx context.Context, in *AuthUserGetRequest, opts ...grpc.CallOption) (*AuthUserGetResponse, error) {
	out := new(AuthUserGetResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UserGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UserList(ctx context.Context, in *AuthUserListRequest, opts ...grpc.CallOption) (*AuthUserListResponse, error) {
	out := new(AuthUserListResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UserList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UserDelete(ctx context.Context, in *AuthUserDeleteRequest, opts ...grpc.CallOption) (*AuthUserDeleteResponse, error) {
	out := new(AuthUserDeleteResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UserDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UserChangePassword(ctx context.Context, in *AuthUserChangePasswordRequest, opts ...grpc.CallOption) (*AuthUserChangePasswordResponse, error) {
	out := new(AuthUserChangePasswordResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UserChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UserGrantRole(ctx context.Context, in *AuthUserGrantRoleRequest, opts ...grpc.CallOption) (*AuthUserGrantRoleResponse, error) {
	out := new(AuthUserGrantRoleResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UserGrantRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) UserRevokeRole(ctx context.Context, in *AuthUserRevokeRoleRequest, opts ...grpc.CallOption) (*AuthUserRevokeRoleResponse, error) {
	out := new(AuthUserRevokeRoleResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/UserRevokeRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) RoleAdd(ctx context.Context, in *AuthRoleAddRequest, opts ...grpc.CallOption) (*AuthRoleAddResponse, error) {
	out := new(AuthRoleAddResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/RoleAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) RoleGet(ctx context.Context, in *AuthRoleGetRequest, opts ...grpc.CallOption) (*AuthRoleGetResponse, error) {
	out := new(AuthRoleGetResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/RoleGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) RoleList(ctx context.Context, in *AuthRoleListRequest, opts ...grpc.CallOption) (*AuthRoleListResponse, error) {
	out := new(AuthRoleListResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/RoleList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) RoleDelete(ctx context.Context, in *AuthRoleDeleteRequest, opts ...grpc.CallOption) (*AuthRoleDeleteResponse, error) {
	out := new(AuthRoleDeleteResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/RoleDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) RoleGrantPermission(ctx context.Context, in *AuthRoleGrantPermissionRequest, opts ...grpc.CallOption) (*AuthRoleGrantPermissionResponse, error) {
	out := new(AuthRoleGrantPermissionResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/RoleGrantPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mydisClient) RoleRevokePermission(ctx context.Context, in *AuthRoleRevokePermissionRequest, opts ...grpc.CallOption) (*AuthRoleRevokePermissionResponse, error) {
	out := new(AuthRoleRevokePermissionResponse)
	err := grpc.Invoke(ctx, "/mydis.Mydis/RoleRevokePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mydis service

type MydisServer interface {
	// -- core functions
	// Keys returns a list of valid keys.
	Keys(context.Context, *Null) (*KeysList, error)
	// KeysWithPrefix returns a list of keys with the given prefix.
	KeysWithPrefix(context.Context, *Key) (*KeysList, error)
	// Has checks if the cache has the given key and that it is not expired.
	Has(context.Context, *Key) (*Bool, error)
	// SetExpire sets the expiration on a key.
	SetExpire(context.Context, *Expiration) (*Null, error)
	// Lock a key from being modified.
	Lock(context.Context, *Key) (*Null, error)
	// LockWithTimeout locks a key, waiting for the given number of seconds if already locked before returning an error.
	LockWithTimeout(context.Context, *Expiration) (*Null, error)
	// Unlock a key for modifications.
	Unlock(context.Context, *Key) (*Null, error)
	// UnlockThenSet unlocks a key, then immediately sets its byte array value.
	UnlockThenSet(context.Context, *ByteValue) (*Null, error)
	// UnlockThenSetList unlocks a key, then immediately sets its list value.
	UnlockThenSetList(context.Context, *List) (*Null, error)
	// Delete removes a key from the cache.
	Delete(context.Context, *Key) (*Null, error)
	// Clear the cache.
	Clear(context.Context, *Null) (*Null, error)
	// -- bytes functions
	// Get gets the value for the given key as a byte slice.
	Get(context.Context, *Key) (*ByteValue, error)
	// GetMany gets a list of values from the cache.
	GetMany(context.Context, *KeysList) (*Hash, error)
	// GetWithPrefix returns the keys with the given prefix.
	GetWithPrefix(context.Context, *Key) (*Hash, error)
	// Set sets the byte value.
	Set(context.Context, *ByteValue) (*Null, error)
	// SetNX sets a value only if the key doesn't exist, returns true if changed.
	SetNX(context.Context, *ByteValue) (*Bool, error)
	// SetMany values, returning a map[key]errorText for any errors.
	SetMany(context.Context, *Hash) (*ErrorHash, error)
	// Length returns the length of the value for the given key.
	Length(context.Context, *Key) (*IntValue, error)
	// -- number functions
	// GetInt gets an integer value for the given key.
	GetInt(context.Context, *Key) (*IntValue, error)
	// GetFloat gets a float value for the given key.
	GetFloat(context.Context, *Key) (*FloatValue, error)
	// SetInt sets an integer.
	SetInt(context.Context, *IntValue) (*Null, error)
	// SetFloat sets a float.
	SetFloat(context.Context, *FloatValue) (*Null, error)
	// IncrementInt increment an integer stored at the given key by the given number and returns new value.
	IncrementInt(context.Context, *IntValue) (*IntValue, error)
	// DecrementInt decrements an integer stored at the given key by the given number and returns new value.
	DecrementInt(context.Context, *IntValue) (*IntValue, error)
	// IncrementFloat increment a float stored at the given key by the given number and returns new value.
	IncrementFloat(context.Context, *FloatValue) (*FloatValue, error)
	// DecrementFloat decrements a float stored at the given key by the given number and returns new value.
	DecrementFloat(context.Context, *FloatValue) (*FloatValue, error)
	// -- list functions
	// GetList gets a list from the cache.
	GetList(context.Context, *Key) (*List, error)
	// GetListItem gets a single item from a list by index, supports negative indexing.
	GetListItem(context.Context, *ListItem) (*ByteValue, error)
	// SetList sets a list in the cache.
	SetList(context.Context, *List) (*Null, error)
	// SetListItem sets a single item in a list by index.
	SetListItem(context.Context, *ListItem) (*Null, error)
	// ListLength returns the number of items in a list.
	ListLength(context.Context, *Key) (*IntValue, error)
	// ListLimit sets the maximum length of a list, removing items from the top once limit is reached.
	ListLimit(context.Context, *ListItem) (*Null, error)
	// ListInsert inserts a new item at the given index in the list.
	ListInsert(context.Context, *ListItem) (*Null, error)
	// ListAppend inserts a new item at the end of the list.
	ListAppend(context.Context, *ListItem) (*Null, error)
	// ListPopLeft returns and removes the first item in a list.
	ListPopLeft(context.Context, *Key) (*ByteValue, error)
	// ListPopRight returns and removes the last item in a list.
	ListPopRight(context.Context, *Key) (*ByteValue, error)
	// ListHas determines if a list contains an item, returns index or -1 if not found.
	ListHas(context.Context, *ListItem) (*IntValue, error)
	// ListDelete removes an item from a list by index.
	ListDelete(context.Context, *ListItem) (*Null, error)
	// ListDeleteItem removes the first occurrence of value from a list, returns index of removed item or -1 for not found.
	ListDeleteItem(context.Context, *ListItem) (*IntValue, error)
	// -- hash functions
	// GetHash gets a hash from the cache.
	GetHash(context.Context, *Key) (*Hash, error)
	// GetHashField gets a single value in a hash.
	GetHashField(context.Context, *HashField) (*ByteValue, error)
	// GetHashFields gets multiple hash values.
	GetHashFields(context.Context, *HashFieldSet) (*Hash, error)
	// HashHas determines if a hash has a given field.
	HashHas(context.Context, *HashField) (*Bool, error)
	// HashLength returns the number of fields in a hash.
	HashLength(context.Context, *Key) (*IntValue, error)
	// HashFields gets a list of the fields in a hash.
	HashFields(context.Context, *Key) (*KeysList, error)
	// HashValues gets a list of the values in a hash.
	HashValues(context.Context, *Key) (*List, error)
	// SetHash sets the value of a hash.
	SetHash(context.Context, *Hash) (*Null, error)
	// SetHashField sets a single value in a hash.
	SetHashField(context.Context, *HashField) (*Null, error)
	// SetHashFields sets multiple values in a hash.
	SetHashFields(context.Context, *Hash) (*Null, error)
	// DelHashField deletes a field from a hash.
	DelHashField(context.Context, *HashField) (*Null, error)
	// -- push functions
	// Watch for changes to a key.
	Watch(Mydis_WatchServer) error
	// -- auth passthrough functions
	// AuthEnable enables authentication.
	AuthEnable(context.Context, *AuthEnableRequest) (*AuthEnableResponse, error)
	// AuthDisable disables authentication.
	AuthDisable(context.Context, *AuthDisableRequest) (*AuthDisableResponse, error)
	// Authenticate processes an authenticate request.
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// UserAdd adds a new user.
	UserAdd(context.Context, *AuthUserAddRequest) (*AuthUserAddResponse, error)
	// UserGet gets detailed user information.
	UserGet(context.Context, *AuthUserGetRequest) (*AuthUserGetResponse, error)
	// UserList gets a list of all users.
	UserList(context.Context, *AuthUserListRequest) (*AuthUserListResponse, error)
	// UserDelete deletes a specified user.
	UserDelete(context.Context, *AuthUserDeleteRequest) (*AuthUserDeleteResponse, error)
	// UserChangePassword changes the password of a specified user.
	UserChangePassword(context.Context, *AuthUserChangePasswordRequest) (*AuthUserChangePasswordResponse, error)
	// UserGrantRole grants a role to a specified user.
	UserGrantRole(context.Context, *AuthUserGrantRoleRequest) (*AuthUserGrantRoleResponse, error)
	// UserRevokeRole revokes a role of specified user.
	UserRevokeRole(context.Context, *AuthUserRevokeRoleRequest) (*AuthUserRevokeRoleResponse, error)
	// RoleAdd adds a new role.
	RoleAdd(context.Context, *AuthRoleAddRequest) (*AuthRoleAddResponse, error)
	// RoleGet gets detailed role information.
	RoleGet(context.Context, *AuthRoleGetRequest) (*AuthRoleGetResponse, error)
	// RoleList gets lists of all roles.
	RoleList(context.Context, *AuthRoleListRequest) (*AuthRoleListResponse, error)
	// RoleDelete deletes a specified role.
	RoleDelete(context.Context, *AuthRoleDeleteRequest) (*AuthRoleDeleteResponse, error)
	// RoleGrantPermission grants a permission of a specified key or range to a specified role.
	RoleGrantPermission(context.Context, *AuthRoleGrantPermissionRequest) (*AuthRoleGrantPermissionResponse, error)
	// RoleRevokePermission revokes a key or range permission of a specified role.
	RoleRevokePermission(context.Context, *AuthRoleRevokePermissionRequest) (*AuthRoleRevokePermissionResponse, error)
}

func RegisterMydisServer(s *grpc.Server, srv MydisServer) {
	s.RegisterService(&_Mydis_serviceDesc, srv)
}

func _Mydis_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Keys(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_KeysWithPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).KeysWithPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/KeysWithPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).KeysWithPrefix(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Has(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Expiration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetExpire(ctx, req.(*Expiration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Lock(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_LockWithTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Expiration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).LockWithTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/LockWithTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).LockWithTimeout(ctx, req.(*Expiration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Unlock(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UnlockThenSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByteValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UnlockThenSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UnlockThenSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UnlockThenSet(ctx, req.(*ByteValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UnlockThenSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UnlockThenSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UnlockThenSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UnlockThenSetList(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Clear(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetMany(ctx, req.(*KeysList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetWithPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetWithPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetWithPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetWithPrefix(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByteValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Set(ctx, req.(*ByteValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetNX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByteValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetNX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetNX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetNX(ctx, req.(*ByteValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetMany(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Length_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Length(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Length",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Length(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetInt(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetFloat(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetInt(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetFloat(ctx, req.(*FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_IncrementInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).IncrementInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/IncrementInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).IncrementInt(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_DecrementInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).DecrementInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/DecrementInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).DecrementInt(ctx, req.(*IntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_IncrementFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).IncrementFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/IncrementFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).IncrementFloat(ctx, req.(*FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_DecrementFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).DecrementFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/DecrementFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).DecrementFloat(ctx, req.(*FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetList(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetListItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetListItem(ctx, req.(*ListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetList(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetListItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetListItem(ctx, req.(*ListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListLength(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListLimit(ctx, req.(*ListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListInsert(ctx, req.(*ListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListAppend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListAppend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListAppend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListAppend(ctx, req.(*ListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListPopLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListPopLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListPopLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListPopLeft(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListPopRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListPopRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListPopRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListPopRight(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListHas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListHas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListHas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListHas(ctx, req.(*ListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListDelete(ctx, req.(*ListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_ListDeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).ListDeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/ListDeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).ListDeleteItem(ctx, req.(*ListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetHash(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetHashField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetHashField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetHashField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetHashField(ctx, req.(*HashField))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_GetHashFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashFieldSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).GetHashFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/GetHashFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).GetHashFields(ctx, req.(*HashFieldSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_HashHas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).HashHas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/HashHas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).HashHas(ctx, req.(*HashField))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_HashLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).HashLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/HashLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).HashLength(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_HashFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).HashFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/HashFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).HashFields(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_HashValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).HashValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/HashValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).HashValues(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetHash(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetHashField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetHashField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetHashField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetHashField(ctx, req.(*HashField))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_SetHashFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).SetHashFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/SetHashFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).SetHashFields(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_DelHashField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).DelHashField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/DelHashField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).DelHashField(ctx, req.(*HashField))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MydisServer).Watch(&mydisWatchServer{stream})
}

type Mydis_WatchServer interface {
	Send(*Event) error
	Recv() (*WatchRequest, error)
	grpc.ServerStream
}

type mydisWatchServer struct {
	grpc.ServerStream
}

func (x *mydisWatchServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mydisWatchServer) Recv() (*WatchRequest, error) {
	m := new(WatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mydis_AuthEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).AuthEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/AuthEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).AuthEnable(ctx, req.(*AuthEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_AuthDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).AuthDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/AuthDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).AuthDisable(ctx, req.(*AuthDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UserAdd(ctx, req.(*AuthUserAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UserGet(ctx, req.(*AuthUserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UserList(ctx, req.(*AuthUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UserDelete(ctx, req.(*AuthUserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UserChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UserChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UserChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UserChangePassword(ctx, req.(*AuthUserChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UserGrantRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserGrantRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UserGrantRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UserGrantRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UserGrantRole(ctx, req.(*AuthUserGrantRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_UserRevokeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRevokeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).UserRevokeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/UserRevokeRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).UserRevokeRole(ctx, req.(*AuthUserRevokeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_RoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRoleAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).RoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/RoleAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).RoleAdd(ctx, req.(*AuthRoleAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_RoleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRoleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).RoleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/RoleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).RoleGet(ctx, req.(*AuthRoleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/RoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).RoleList(ctx, req.(*AuthRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_RoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRoleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).RoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/RoleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).RoleDelete(ctx, req.(*AuthRoleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_RoleGrantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRoleGrantPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).RoleGrantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/RoleGrantPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).RoleGrantPermission(ctx, req.(*AuthRoleGrantPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mydis_RoleRevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRoleRevokePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MydisServer).RoleRevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mydis.Mydis/RoleRevokePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MydisServer).RoleRevokePermission(ctx, req.(*AuthRoleRevokePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mydis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mydis.Mydis",
	HandlerType: (*MydisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keys",
			Handler:    _Mydis_Keys_Handler,
		},
		{
			MethodName: "KeysWithPrefix",
			Handler:    _Mydis_KeysWithPrefix_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _Mydis_Has_Handler,
		},
		{
			MethodName: "SetExpire",
			Handler:    _Mydis_SetExpire_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Mydis_Lock_Handler,
		},
		{
			MethodName: "LockWithTimeout",
			Handler:    _Mydis_LockWithTimeout_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Mydis_Unlock_Handler,
		},
		{
			MethodName: "UnlockThenSet",
			Handler:    _Mydis_UnlockThenSet_Handler,
		},
		{
			MethodName: "UnlockThenSetList",
			Handler:    _Mydis_UnlockThenSetList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Mydis_Delete_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _Mydis_Clear_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Mydis_Get_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _Mydis_GetMany_Handler,
		},
		{
			MethodName: "GetWithPrefix",
			Handler:    _Mydis_GetWithPrefix_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Mydis_Set_Handler,
		},
		{
			MethodName: "SetNX",
			Handler:    _Mydis_SetNX_Handler,
		},
		{
			MethodName: "SetMany",
			Handler:    _Mydis_SetMany_Handler,
		},
		{
			MethodName: "Length",
			Handler:    _Mydis_Length_Handler,
		},
		{
			MethodName: "GetInt",
			Handler:    _Mydis_GetInt_Handler,
		},
		{
			MethodName: "GetFloat",
			Handler:    _Mydis_GetFloat_Handler,
		},
		{
			MethodName: "SetInt",
			Handler:    _Mydis_SetInt_Handler,
		},
		{
			MethodName: "SetFloat",
			Handler:    _Mydis_SetFloat_Handler,
		},
		{
			MethodName: "IncrementInt",
			Handler:    _Mydis_IncrementInt_Handler,
		},
		{
			MethodName: "DecrementInt",
			Handler:    _Mydis_DecrementInt_Handler,
		},
		{
			MethodName: "IncrementFloat",
			Handler:    _Mydis_IncrementFloat_Handler,
		},
		{
			MethodName: "DecrementFloat",
			Handler:    _Mydis_DecrementFloat_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _Mydis_GetList_Handler,
		},
		{
			MethodName: "GetListItem",
			Handler:    _Mydis_GetListItem_Handler,
		},
		{
			MethodName: "SetList",
			Handler:    _Mydis_SetList_Handler,
		},
		{
			MethodName: "SetListItem",
			Handler:    _Mydis_SetListItem_Handler,
		},
		{
			MethodName: "ListLength",
			Handler:    _Mydis_ListLength_Handler,
		},
		{
			MethodName: "ListLimit",
			Handler:    _Mydis_ListLimit_Handler,
		},
		{
			MethodName: "ListInsert",
			Handler:    _Mydis_ListInsert_Handler,
		},
		{
			MethodName: "ListAppend",
			Handler:    _Mydis_ListAppend_Handler,
		},
		{
			MethodName: "ListPopLeft",
			Handler:    _Mydis_ListPopLeft_Handler,
		},
		{
			MethodName: "ListPopRight",
			Handler:    _Mydis_ListPopRight_Handler,
		},
		{
			MethodName: "ListHas",
			Handler:    _Mydis_ListHas_Handler,
		},
		{
			MethodName: "ListDelete",
			Handler:    _Mydis_ListDelete_Handler,
		},
		{
			MethodName: "ListDeleteItem",
			Handler:    _Mydis_ListDeleteItem_Handler,
		},
		{
			MethodName: "GetHash",
			Handler:    _Mydis_GetHash_Handler,
		},
		{
			MethodName: "GetHashField",
			Handler:    _Mydis_GetHashField_Handler,
		},
		{
			MethodName: "GetHashFields",
			Handler:    _Mydis_GetHashFields_Handler,
		},
		{
			MethodName: "HashHas",
			Handler:    _Mydis_HashHas_Handler,
		},
		{
			MethodName: "HashLength",
			Handler:    _Mydis_HashLength_Handler,
		},
		{
			MethodName: "HashFields",
			Handler:    _Mydis_HashFields_Handler,
		},
		{
			MethodName: "HashValues",
			Handler:    _Mydis_HashValues_Handler,
		},
		{
			MethodName: "SetHash",
			Handler:    _Mydis_SetHash_Handler,
		},
		{
			MethodName: "SetHashField",
			Handler:    _Mydis_SetHashField_Handler,
		},
		{
			MethodName: "SetHashFields",
			Handler:    _Mydis_SetHashFields_Handler,
		},
		{
			MethodName: "DelHashField",
			Handler:    _Mydis_DelHashField_Handler,
		},
		{
			MethodName: "AuthEnable",
			Handler:    _Mydis_AuthEnable_Handler,
		},
		{
			MethodName: "AuthDisable",
			Handler:    _Mydis_AuthDisable_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _Mydis_Authenticate_Handler,
		},
		{
			MethodName: "UserAdd",
			Handler:    _Mydis_UserAdd_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _Mydis_UserGet_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _Mydis_UserList_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _Mydis_UserDelete_Handler,
		},
		{
			MethodName: "UserChangePassword",
			Handler:    _Mydis_UserChangePassword_Handler,
		},
		{
			MethodName: "UserGrantRole",
			Handler:    _Mydis_UserGrantRole_Handler,
		},
		{
			MethodName: "UserRevokeRole",
			Handler:    _Mydis_UserRevokeRole_Handler,
		},
		{
			MethodName: "RoleAdd",
			Handler:    _Mydis_RoleAdd_Handler,
		},
		{
			MethodName: "RoleGet",
			Handler:    _Mydis_RoleGet_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Mydis_RoleList_Handler,
		},
		{
			MethodName: "RoleDelete",
			Handler:    _Mydis_RoleDelete_Handler,
		},
		{
			MethodName: "RoleGrantPermission",
			Handler:    _Mydis_RoleGrantPermission_Handler,
		},
		{
			MethodName: "RoleRevokePermission",
			Handler:    _Mydis_RoleRevokePermission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Mydis_Watch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mydis.proto",
}

func init() { proto.RegisterFile("mydis.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x59, 0x4b, 0x73, 0x1b, 0xc7,
	0x11, 0x06, 0x88, 0x07, 0x81, 0x06, 0x08, 0x51, 0xa3, 0x47, 0xc1, 0xb0, 0x64, 0xc3, 0x63, 0x53,
	0x62, 0xf8, 0xb2, 0x0a, 0xd2, 0x41, 0xc9, 0x4d, 0x22, 0x20, 0x0a, 0x11, 0x65, 0x33, 0x0b, 0x2a,
	0x4a, 0xc5, 0x07, 0xd5, 0x0a, 0x68, 0x0a, 0x5b, 0x5c, 0xec, 0x22, 0xbb, 0x03, 0x86, 0xa8, 0xca,
	0x21, 0x39, 0xe4, 0x96, 0x7f, 0x90, 0x1f, 0xe1, 0xbf, 0xe8, 0x9a, 0xc7, 0xbe, 0x66, 0x17, 0x00,
	0x05, 0xeb, 0xc2, 0xda, 0x99, 0xf9, 0xfa, 0x9b, 0x6f, 0x7b, 0x7a, 0x7a, 0xd1, 0x4d, 0xa8, 0x4d,
	0xe6, 0x23, 0xcb, 0x3f, 0x9a, 0x7a, 0x2e, 0x73, 0x49, 0x49, 0x0c, 0x68, 0x19, 0x8a, 0x3f, 0xcd,
	0x6c, 0x9b, 0xfe, 0xba, 0x01, 0x85, 0x37, 0x38, 0x27, 0xdb, 0x50, 0xb8, 0xc4, 0x79, 0x33, 0xdf,
	0xce, 0xef, 0x56, 0x0d, 0xfe, 0x48, 0xee, 0x42, 0xc9, 0xb6, 0x26, 0x16, 0x6b, 0x16, 0xda, 0xf9,
	0xdd, 0x82, 0x21, 0x07, 0xa4, 0x05, 0x15, 0x0f, 0xaf, 0x2c, 0xdf, 0x72, 0x9d, 0x66, 0x51, 0x2c,
	0x84, 0x63, 0xf2, 0x08, 0x1a, 0x13, 0xcb, 0x79, 0xeb, 0x8e, 0x8c, 0x00, 0x01, 0x02, 0xa1, 0xcd,
	0x0a, 0x9c, 0x79, 0x1d, 0xc7, 0xd5, 0x14, 0x2e, 0x31, 0x4b, 0x0e, 0xe0, 0xf6, 0xc4, 0x72, 0x8e,
	0x3d, 0x34, 0x19, 0x86, 0xd0, 0xba, 0x80, 0xa6, 0x17, 0x04, 0xda, 0xbc, 0xd6, 0xd0, 0x5b, 0x0a,
	0xad, 0x2f, 0xf0, 0xb7, 0xfb, 0x68, 0xbb, 0xc3, 0xcb, 0x66, 0xa3, 0x9d, 0xdf, 0xad, 0x18, 0x72,
	0x40, 0x28, 0xd4, 0xc5, 0xc3, 0xb9, 0x35, 0x41, 0x77, 0xc6, 0x9a, 0xb7, 0x84, 0x79, 0x62, 0x8e,
	0x3e, 0x80, 0xe2, 0x4b, 0xd7, 0xb5, 0x39, 0xc3, 0x95, 0x69, 0xcf, 0x50, 0xf8, 0xac, 0x62, 0xc8,
	0x01, 0x7d, 0x02, 0xd0, 0xbb, 0x9e, 0x5a, 0x9e, 0xc9, 0xf8, 0x2e, 0x69, 0xaf, 0x6e, 0x43, 0x01,
	0xaf, 0xa7, 0xcd, 0x8d, 0x76, 0x7e, 0x97, 0x18, 0xfc, 0x91, 0x3e, 0x85, 0xea, 0xcb, 0x39, 0xc3,
	0xbf, 0x72, 0xf3, 0xec, 0x63, 0x90, 0xdb, 0x70, 0x93, 0x7a, 0xb0, 0x4d, 0x07, 0x2a, 0x7d, 0x87,
	0xdd, 0xc8, 0x86, 0x04, 0x36, 0xcf, 0x00, 0x5e, 0xd9, 0xae, 0x79, 0x33, 0xab, 0x7c, 0x60, 0xf5,
	0x0d, 0x54, 0xde, 0xe0, 0xdc, 0x3f, 0xb5, 0x7c, 0x46, 0x08, 0x14, 0x2f, 0x71, 0xee, 0x37, 0xf3,
	0xed, 0xc2, 0x6e, 0xd5, 0x10, 0xcf, 0xb4, 0x0b, 0x45, 0xb1, 0xb6, 0x94, 0xaf, 0x10, 0x2a, 0xcf,
	0x0e, 0x2b, 0xfa, 0x1a, 0x2a, 0x9c, 0xa5, 0xcf, 0x70, 0x92, 0xcd, 0x64, 0x39, 0x23, 0xbc, 0x16,
	0xca, 0x0a, 0x86, 0x1c, 0x44, 0xfc, 0x85, 0xb8, 0x67, 0xfe, 0x05, 0xd5, 0x9e, 0xe7, 0xb9, 0xde,
	0x6b, 0xd3, 0x1f, 0x93, 0x67, 0x50, 0x46, 0x3e, 0x90, 0x92, 0x6b, 0x9d, 0x07, 0x47, 0xf2, 0x2a,
	0x84, 0x08, 0xf9, 0xe4, 0xf7, 0x1c, 0xe6, 0xcd, 0x0d, 0x85, 0x6d, 0xfd, 0x11, 0x6a, 0xb1, 0xe9,
	0x55, 0x9e, 0xaa, 0xaa, 0x9d, 0xff, 0xb4, 0xf1, 0x3c, 0x4f, 0xff, 0x97, 0x07, 0x18, 0x30, 0xcf,
	0x72, 0x3e, 0x89, 0xfd, 0xd3, 0xa6, 0x9d, 0xb8, 0x53, 0x22, 0x41, 0x91, 0xcd, 0x91, 0x38, 0x1e,
	0x29, 0x48, 0x42, 0x5b, 0xcf, 0x01, 0xa2, 0xc9, 0xcf, 0x92, 0xf3, 0xef, 0x3c, 0x14, 0x17, 0x08,
	0x39, 0x48, 0x0a, 0xb9, 0xaf, 0x84, 0x7c, 0x09, 0x09, 0xf5, 0xb8, 0x84, 0x3e, 0x54, 0x39, 0xe7,
	0x2b, 0x0b, 0xed, 0x51, 0xb6, 0xe1, 0x05, 0x5f, 0x0a, 0xb4, 0x8b, 0xc1, 0x82, 0xa3, 0x3d, 0x85,
	0x7a, 0x48, 0x35, 0x40, 0xb6, 0x9c, 0xad, 0x90, 0xc9, 0x16, 0x05, 0x22, 0xf5, 0xa0, 0xfe, 0xde,
	0x64, 0xc3, 0xb1, 0x81, 0xff, 0x98, 0x61, 0x66, 0x00, 0xdf, 0x87, 0xf2, 0xd4, 0xc3, 0x0b, 0x4b,
	0xc6, 0x5d, 0xc5, 0x50, 0x23, 0x8e, 0xf4, 0xf0, 0x4a, 0x05, 0x30, 0x7f, 0x24, 0x0d, 0xd8, 0xb0,
	0x46, 0x2a, 0x1f, 0x6e, 0x58, 0x23, 0x6e, 0x39, 0x34, 0x9d, 0x21, 0xda, 0xcd, 0x92, 0xb4, 0x94,
	0x23, 0xfa, 0x6b, 0x1e, 0x4a, 0xbd, 0x2b, 0x74, 0x18, 0xd9, 0x83, 0x22, 0x9b, 0x4f, 0x65, 0xf2,
	0x68, 0x84, 0xde, 0x17, 0x6b, 0xf2, 0xef, 0xf9, 0x7c, 0x8a, 0x86, 0xc0, 0x90, 0x3d, 0xd8, 0x1c,
	0xce, 0x3c, 0x0f, 0x1d, 0x79, 0x69, 0x6a, 0x9d, 0x6d, 0x05, 0x0f, 0xf3, 0x86, 0x11, 0x00, 0xc8,
	0x01, 0x54, 0xa6, 0x3c, 0x21, 0xbb, 0x33, 0x5f, 0xe8, 0xc9, 0x02, 0x87, 0x08, 0xda, 0x86, 0x6a,
	0xb8, 0x19, 0xd9, 0x84, 0xc2, 0xd9, 0xbb, 0xf3, 0xed, 0x1c, 0x01, 0x28, 0x77, 0x7b, 0xa7, 0xbd,
	0xf3, 0xde, 0x76, 0x9e, 0xfe, 0x3f, 0x0f, 0x70, 0x86, 0xde, 0xc4, 0xf2, 0x45, 0xda, 0xec, 0x40,
	0x65, 0x8a, 0xde, 0xe4, 0x3c, 0x2d, 0x3d, 0x02, 0x1d, 0x09, 0xe9, 0x21, 0x2e, 0x70, 0xac, 0x8c,
	0x0c, 0xe1, 0xd8, 0xaf, 0xa1, 0xea, 0x99, 0xce, 0x27, 0xfc, 0x80, 0xce, 0x48, 0x1d, 0x71, 0x45,
	0x4c, 0xf4, 0x9c, 0x11, 0xdd, 0x83, 0xa2, 0x30, 0xab, 0x40, 0xd1, 0xe8, 0xbd, 0xe8, 0x6e, 0xe7,
	0x48, 0x15, 0x4a, 0xef, 0x8d, 0x3e, 0x97, 0x43, 0xb6, 0xa0, 0xca, 0x27, 0xe5, 0x70, 0x83, 0xfe,
	0x37, 0x0f, 0x0d, 0x03, 0xfd, 0xa9, 0xeb, 0xf8, 0xf8, 0x1a, 0xcd, 0x11, 0x7a, 0xe4, 0x21, 0xc0,
	0xd0, 0x9e, 0xf9, 0x0c, 0xbd, 0x0f, 0xd6, 0x48, 0x68, 0x2c, 0x1a, 0x55, 0x35, 0xd3, 0x1f, 0xf1,
	0xad, 0x27, 0x38, 0xf9, 0x28, 0x57, 0x37, 0xc4, 0x6a, 0x45, 0x4e, 0xf4, 0x47, 0x89, 0x8f, 0x5b,
	0x41, 0xfb, 0xb8, 0x09, 0xcd, 0x17, 0xec, 0x03, 0x43, 0x6f, 0x22, 0x3c, 0x5b, 0xe4, 0x9a, 0x2f,
	0xd8, 0x39, 0x7a, 0x13, 0x7a, 0x07, 0x6e, 0xbf, 0x98, 0xb1, 0x71, 0xcf, 0x31, 0x3f, 0xda, 0xa8,
	0x02, 0x8a, 0xde, 0x05, 0xc2, 0x27, 0xbb, 0x96, 0x1f, 0x9f, 0xed, 0xc1, 0x1d, 0x3e, 0x8b, 0x0e,
	0xb3, 0x86, 0xe2, 0x83, 0x24, 0xa3, 0x8f, 0x40, 0xd1, 0x31, 0x27, 0xa8, 0xc2, 0x4f, 0x3c, 0x73,
	0x39, 0x53, 0xd3, 0xf7, 0xff, 0xe9, 0x7a, 0xc1, 0xf5, 0x08, 0xc7, 0xb4, 0x2b, 0xc9, 0xdf, 0xf9,
	0xe8, 0xbd, 0x18, 0x8d, 0xd6, 0x65, 0xd9, 0x8d, 0x58, 0x4e, 0x90, 0x2d, 0x61, 0xa1, 0xfb, 0x70,
	0x2f, 0x40, 0x76, 0xd1, 0xc6, 0xa5, 0xc2, 0xe9, 0xcf, 0xf0, 0x30, 0x00, 0x1f, 0x8f, 0xf9, 0xb9,
	0x9e, 0xa9, 0x0d, 0xd7, 0xd5, 0xf9, 0x12, 0x9a, 0xa1, 0x4e, 0xcf, 0x74, 0x98, 0xe1, 0xda, 0x71,
	0x01, 0x33, 0x1f, 0xbd, 0x80, 0x8b, 0x3f, 0xf3, 0x39, 0xcf, 0xb5, 0x83, 0x84, 0x28, 0x9e, 0xe9,
	0x31, 0x7c, 0x15, 0x70, 0x18, 0x78, 0xe5, 0x5e, 0xa2, 0x46, 0x92, 0x12, 0x94, 0x45, 0xa2, 0x1c,
	0xc6, 0x4d, 0x97, 0xbb, 0x3d, 0x8e, 0x4c, 0xba, 0x56, 0x70, 0xe6, 0x63, 0x9c, 0xf7, 0x64, 0x44,
	0x70, 0x61, 0xfc, 0x1b, 0x18, 0x04, 0x8a, 0x9a, 0xe6, 0x04, 0xf1, 0x69, 0x75, 0x10, 0x7c, 0x3a,
	0x75, 0x10, 0x29, 0xea, 0x5f, 0xe0, 0x9b, 0x50, 0x04, 0xf7, 0x5b, 0x74, 0x49, 0x97, 0xbd, 0xf8,
	0x0e, 0x14, 0xf9, 0xe5, 0x15, 0x2f, 0x5e, 0xeb, 0xdc, 0x4e, 0x5d, 0x70, 0x43, 0x2c, 0xd3, 0x11,
	0x7c, 0x1b, 0x90, 0x4b, 0x87, 0x66, 0xb2, 0xeb, 0x9a, 0xe2, 0xe9, 0xa0, 0xba, 0x20, 0x1d, 0x54,
	0x63, 0xe9, 0xe0, 0x58, 0xfa, 0x31, 0xb8, 0x5a, 0xf2, 0xae, 0x93, 0x43, 0x28, 0x8f, 0xc5, 0x7d,
	0x17, 0xd4, 0xb5, 0xce, 0x3d, 0x25, 0x32, 0x99, 0x0c, 0x0c, 0x05, 0xa2, 0x5d, 0xe9, 0xcb, 0xf0,
	0x2a, 0xae, 0xc7, 0xf2, 0x0b, 0xdc, 0x4d, 0x5e, 0xdd, 0xb5, 0x68, 0xf8, 0xe7, 0x88, 0xb9, 0x97,
	0xe8, 0x04, 0x9f, 0x3c, 0x31, 0x08, 0x24, 0x86, 0x17, 0x7a, 0x3d, 0x89, 0x7f, 0x8f, 0x58, 0x44,
	0xd4, 0xad, 0xad, 0x90, 0x1f, 0x95, 0x1f, 0x7c, 0x46, 0xc5, 0x80, 0x9e, 0xc0, 0x7d, 0x3d, 0x05,
	0xac, 0x27, 0xf2, 0x67, 0x19, 0x95, 0x59, 0xe9, 0x61, 0x3d, 0xc2, 0x3f, 0x47, 0x57, 0x3b, 0x96,
	0x1e, 0xd6, 0xe3, 0x7a, 0x03, 0xad, 0xac, 0x34, 0xf1, 0xbb, 0xe2, 0x2e, 0x4c, 0x17, 0xeb, 0xb1,
	0x5c, 0x46, 0x2c, 0xbf, 0xe3, 0x50, 0xa3, 0x5b, 0x5d, 0x58, 0x76, 0xab, 0x55, 0x90, 0x47, 0x69,
	0xe7, 0x4b, 0x86, 0x90, 0x22, 0x8f, 0x52, 0xdd, 0xda, 0xe4, 0x3c, 0xcd, 0x87, 0xe4, 0x62, 0x10,
	0xc4, 0x67, 0x3c, 0x33, 0xae, 0xe7, 0xef, 0xb3, 0x28, 0xb1, 0xa5, 0xb2, 0xe6, 0x7a, 0x8c, 0x7f,
	0x81, 0xf6, 0xe2, 0x54, 0xb9, 0x16, 0x65, 0xe7, 0x3f, 0x0f, 0xa0, 0xf4, 0x96, 0x03, 0xc8, 0x23,
	0x28, 0xf2, 0x0a, 0x8d, 0xd4, 0x94, 0x01, 0xaf, 0xeb, 0x5b, 0xb7, 0xd4, 0x20, 0xa8, 0xdd, 0x68,
	0x8e, 0xfc, 0x08, 0x0d, 0x3e, 0x7a, 0x6f, 0xb1, 0xf1, 0x99, 0xfc, 0x21, 0x0b, 0x11, 0x28, 0xcb,
	0xa0, 0x0d, 0x85, 0xd7, 0xa6, 0x9f, 0x40, 0x05, 0x7b, 0xf0, 0x0a, 0x98, 0xe6, 0xc8, 0x21, 0x54,
	0x07, 0xc8, 0x44, 0xc1, 0x8b, 0x24, 0x08, 0xa9, 0xa8, 0xfe, 0x6d, 0xc5, 0x25, 0xd1, 0x1c, 0xf9,
	0x0e, 0x8a, 0xa7, 0xbc, 0xcc, 0xce, 0x62, 0x54, 0x90, 0xa7, 0x70, 0x8b, 0x43, 0xb8, 0x48, 0x55,
	0x70, 0xdf, 0x80, 0xf7, 0x7b, 0x28, 0xbf, 0x73, 0xec, 0x15, 0xcc, 0x4f, 0x60, 0x4b, 0x82, 0xce,
	0xc7, 0xe8, 0x88, 0xf2, 0x41, 0xff, 0x61, 0xac, 0x5b, 0xfc, 0x08, 0xb7, 0x13, 0x16, 0xa2, 0xce,
	0x0d, 0x30, 0x7c, 0x90, 0xa1, 0x43, 0x46, 0xde, 0x32, 0x1d, 0xdf, 0x43, 0xe9, 0xd8, 0x46, 0xd3,
	0x4b, 0x9e, 0x97, 0x06, 0xda, 0x81, 0xc2, 0x09, 0xb2, 0x04, 0x4d, 0x4a, 0x2e, 0xcd, 0x91, 0x3f,
	0xc0, 0xe6, 0x09, 0xb2, 0xb7, 0xa6, 0x33, 0x27, 0xfa, 0xf9, 0x85, 0x8c, 0xbc, 0x64, 0xa2, 0x39,
	0xb2, 0x07, 0x5b, 0x27, 0xc8, 0x16, 0x1c, 0xbe, 0x86, 0x7d, 0x04, 0x85, 0x1b, 0x39, 0x68, 0x17,
	0x4a, 0x03, 0x64, 0x3f, 0xfd, 0x6d, 0x09, 0x52, 0x05, 0xca, 0x1e, 0x6c, 0x0e, 0x94, 0xd0, 0xf8,
	0x5e, 0xe1, 0x4b, 0x85, 0x05, 0x39, 0xcd, 0x91, 0xc7, 0x50, 0x3e, 0x45, 0xe7, 0x13, 0x1b, 0x67,
	0xc6, 0x67, 0xd0, 0xf6, 0x90, 0xc0, 0x13, 0x64, 0x7d, 0x87, 0xad, 0x02, 0xee, 0x43, 0xe5, 0x04,
	0x99, 0x68, 0x7e, 0x24, 0xa0, 0x41, 0x64, 0x45, 0x6d, 0x11, 0xf1, 0x52, 0xe5, 0x81, 0x64, 0xd5,
	0x99, 0xf4, 0xd7, 0x3f, 0x80, 0xca, 0x20, 0xa0, 0x4d, 0x53, 0xe9, 0xe8, 0x0e, 0xd4, 0xfb, 0xce,
	0xd0, 0xc3, 0x09, 0x3a, 0xd9, 0xec, 0x19, 0xc2, 0x3b, 0x50, 0xef, 0xe2, 0x67, 0xda, 0x3c, 0x87,
	0x46, 0xb8, 0xcf, 0x42, 0x6d, 0x99, 0x6f, 0xfe, 0x1c, 0x1a, 0xe1, 0x6e, 0x9f, 0x67, 0xf9, 0x83,
	0x88, 0x43, 0x71, 0x3f, 0xb2, 0xc2, 0x4a, 0xe5, 0x93, 0x0e, 0xd4, 0x14, 0x4a, 0xf4, 0x79, 0x6e,
	0xc5, 0x56, 0xf9, 0x44, 0x66, 0x84, 0xef, 0x88, 0xc0, 0x59, 0x79, 0xf3, 0x0e, 0xa1, 0x36, 0x58,
	0x46, 0xad, 0xc1, 0xf7, 0x01, 0xf8, 0xd2, 0xcd, 0xc2, 0x6c, 0x1f, 0xaa, 0x02, 0x2c, 0xfa, 0x9f,
	0xab, 0x98, 0x0f, 0x24, 0x73, 0xdf, 0xf1, 0xd1, 0xbb, 0x31, 0xfa, 0xc5, 0x74, 0x8a, 0xce, 0x68,
	0x25, 0xfa, 0x10, 0x6a, 0x7c, 0xe9, 0xcc, 0x9d, 0x9e, 0xe2, 0xc5, 0xea, 0xe4, 0x70, 0x04, 0x75,
	0x05, 0x37, 0xac, 0x4f, 0xe3, 0xd5, 0xf8, 0x43, 0xd8, 0xe4, 0x78, 0x9e, 0xf2, 0x53, 0x4a, 0x32,
	0xdc, 0xa2, 0xb4, 0xab, 0x84, 0xb7, 0x4a, 0xfb, 0x33, 0x68, 0x44, 0xe8, 0xec, 0x33, 0xca, 0xd8,
	0x43, 0xc6, 0x95, 0xe8, 0x60, 0x2d, 0x49, 0x57, 0xcf, 0xa0, 0xae, 0x50, 0xaa, 0xcb, 0x14, 0x5b,
	0x16, 0x33, 0x99, 0xaf, 0xfb, 0x54, 0x24, 0xc4, 0x10, 0xe3, 0x93, 0x3b, 0xba, 0xd9, 0x00, 0x33,
	0xb2, 0xe8, 0x26, 0x7f, 0xe2, 0x3e, 0x4a, 0xef, 0xa2, 0xe5, 0xbc, 0x7d, 0x00, 0xbe, 0x76, 0xd3,
	0x20, 0x83, 0x98, 0x94, 0x15, 0x1f, 0xe6, 0xc7, 0x12, 0x2c, 0x6c, 0xfd, 0x65, 0x37, 0x4e, 0xde,
	0x1e, 0xe1, 0xbf, 0x44, 0xda, 0x4d, 0x7d, 0xe8, 0xea, 0x83, 0xe5, 0x0e, 0x4c, 0xdd, 0x9f, 0xad,
	0x41, 0xc2, 0x77, 0x2b, 0xd8, 0xbb, 0x68, 0x7f, 0x06, 0xfb, 0x13, 0x28, 0x89, 0xce, 0x5c, 0x78,
	0x22, 0xf1, 0x3e, 0x5d, 0xab, 0x1e, 0xef, 0x95, 0xd1, 0xdc, 0x6e, 0xfe, 0x49, 0x9e, 0x1c, 0x03,
	0x44, 0x45, 0x22, 0x69, 0x2a, 0x44, 0xaa, 0x25, 0xd3, 0xfa, 0x2a, 0x63, 0x45, 0xfe, 0xba, 0xa2,
	0x39, 0xf2, 0x0a, 0x6a, 0xb1, 0x22, 0x91, 0xc4, 0xb1, 0xc9, 0x1e, 0x4e, 0xab, 0x95, 0xb5, 0x14,
	0xf2, 0xf4, 0xa1, 0x1e, 0x2f, 0x13, 0x49, 0x1c, 0xad, 0xb5, 0x7d, 0x5a, 0x5f, 0x67, 0xae, 0x85,
	0x54, 0x2f, 0x61, 0x53, 0x15, 0x84, 0x09, 0x39, 0xc9, 0xae, 0x4f, 0x42, 0x8e, 0x56, 0x3f, 0x46,
	0x1c, 0xfc, 0xe7, 0x84, 0xce, 0x11, 0x35, 0x26, 0x52, 0x1c, 0xb1, 0x42, 0x83, 0xe6, 0x48, 0x0f,
	0x2a, 0xc1, 0x6f, 0x76, 0xa2, 0x23, 0x63, 0xcd, 0x89, 0xc4, 0xeb, 0xe8, 0x3f, 0xf2, 0x69, 0x8e,
	0xbc, 0x01, 0x88, 0xaa, 0x47, 0xf2, 0x40, 0x03, 0x27, 0xda, 0x19, 0xad, 0x87, 0x0b, 0x56, 0x43,
	0xb2, 0x21, 0x90, 0x74, 0x05, 0x49, 0x7e, 0xd0, 0xcc, 0x32, 0xfb, 0x4f, 0xad, 0x9d, 0x15, 0xa8,
	0x70, 0x93, 0x73, 0xd8, 0x4a, 0x54, 0x95, 0xe4, 0x5b, 0xdd, 0x4f, 0x5a, 0x3b, 0xaa, 0xd5, 0x5e,
	0x0c, 0x08, 0x59, 0xdf, 0x43, 0x23, 0x59, 0x5f, 0x12, 0xdd, 0x2a, 0xd5, 0xa1, 0x6a, 0x7d, 0xb7,
	0x04, 0x11, 0x3f, 0x6b, 0x55, 0x6b, 0x26, 0xce, 0x3a, 0xd9, 0xae, 0x4a, 0x9c, 0xb5, 0x56, 0x9a,
	0x46, 0x1c, 0x7a, 0xbc, 0x24, 0x1b, 0x59, 0x29, 0x8e, 0x54, 0xbc, 0x04, 0x05, 0x24, 0xd1, 0x91,
	0x8b, 0xe2, 0x45, 0xaf, 0x38, 0x65, 0xbc, 0x44, 0xd5, 0x5c, 0x22, 0x5e, 0x52, 0xed, 0xaf, 0x44,
	0xbc, 0xa4, 0x4b, 0x40, 0x9a, 0x23, 0x17, 0x70, 0x27, 0xa3, 0xa2, 0x23, 0x3b, 0xfa, 0x8b, 0x64,
	0xf6, 0xc9, 0x5a, 0x8f, 0x56, 0xc1, 0xc2, 0x7d, 0x2c, 0xb8, 0x9b, 0x55, 0xe7, 0x11, 0x9d, 0x61,
	0x41, 0xcf, 0xac, 0xf5, 0x78, 0x25, 0x2e, 0xd8, 0xea, 0x63, 0x59, 0xfc, 0x4b, 0xf7, 0xe9, 0x6f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x86, 0x41, 0xc4, 0xe1, 0x1d, 0x00, 0x00,
}
